/* Fonction update qui permet de changer le stock en fonction des $id_attribute récupérés lors du passage de la commande*/


public function updateBdd($unID, $stock)
    {
        $res = Db::getInstance()->execute('
            UPDATE `' . _DB_PREFIX_ . 'stock_available`
            SET `quantity`= ' . $stock .'
            WHERE `id_product_attribute` IN (SELECT `id_product_attribute` 
                                           FROM `' . _DB_PREFIX_ . 'product_attribute_combination`
                                           WHERE `id_attribute` = ' . $unID .')');

        
    }
    
    
------------------------------

public static function updateQuantity($id_product, $id_product_attribute, $delta_quantity, $id_shop = null, $add_movement = true, $params = array())
    {

        if (!Validate::isUnsignedId($id_product)) {
            return false;
        }
        $product = new Product((int) $id_product);
        if (!Validate::isLoadedObject($product)) {
            return false;
        }
        $context = Context::getContext();
        // if there is no $id_shop, gets the context one
        if ($id_shop === null && Shop::getContext() != Shop::CONTEXT_GROUP) {
            $id_shop = (int) $context->shop->id;
        }
        $cat = $product->getDefaultCategory();


         $depends_on_stock = StockAvailable::dependsOnStock($id_product);
        //Try to set available quantity if product does not depend on physical stock
        if (!$depends_on_stock) {
            $stockManager = ServiceLocator::get('\\PrestaShop\\PrestaShop\\Core\\Stock\\StockManager');
            $id_stock_available = (int) StockAvailable::getStockAvailableIdByProductId($id_product, $id_product_attribute, $id_shop);
            if ($id_stock_available) {
                if($cat == 3){
                    if ($id_product_attribute != 0){

                        $ids_product_attribute = array();
                       
                        foreach (Product::getProductAttributesIds($id_product) as $id_product_attribute){

                            $ids_product_attribute[] = $id_product_attribute['id_product_attribute'];

                        

                            foreach ($ids_product_attribute as $id_product_attribute){

                                $id_stock_available = StockAvailable::getStockAvailableIdByProductId($id_product, $id_product_attribute, $id_shop);     

                                $stock_available = new StockAvailable($id_stock_available);

                                $stock_available->quantity = $stock_available->quantity + $delta_quantity;  
                                               
                            }
                            

                            $id_attrib = Product::getAttributesParams($id_product, $id_product_attribute);

                            
                            $i = 0;                            
                            while ($i<sizeof($id_attrib)){
                                $id = $id_attrib[$i]['id_attribute'];
                                
                            //     // $stock_available->Db::getInstance()->update('stock_available', array('quantity' => $stock_available->quantity), '`id_product_attribute` IN (SELECT `id_product_attribute` 
                            //     //            FROM `' . _DB_PREFIX_ . 'product_attribute_combination`
                            //     //            WHERE `id_attribute` = ' . $id .')');
                                StockAvailable::updateBdd($id, $stock_available->quantity);
                            //     $stock_available->update();
                                $i++;
                                if (true === $add_movement && 0 != $delta_quantity) {
                                    $stockManager->saveMovement($id_product, $id_product_attribute, $delta_quantity);
                                }   
                            }

                                  
                            
                            
                                                  
                        }
                        
                        
                    }               

                    
                }


                else{

                    $stock_available = new StockAvailable($id_stock_available);

                    //$delta_quantity = -1 * ((int) $stock_available->quantity - (int) $quantity);

                    $stock_available->quantity = $stock_available->quantity + $delta_quantity;

                    $stock_available->update();
                    
                }
            } else {
                $out_of_stock = StockAvailable::outOfStock($id_product, $id_shop);
                $stock_available = new StockAvailable();
                $stock_available->out_of_stock = (int) $out_of_stock;
                $stock_available->id_product = (int) $id_product;
                $stock_available->id_product_attribute = (int) $id_product_attribute;
                $stock_available->quantity = (int) $quantity;
                if ($id_shop === null) {
                    $shop_group = Shop::getContextShopGroup();
                } else {
                    $shop_group = new ShopGroup((int) Shop::getGroupFromShop((int) $id_shop));
                }
                // if quantities are shared between shops of the group
                if ($shop_group->share_stock) {
                    $stock_available->id_shop = 0;
                    $stock_available->id_shop_group = (int) $shop_group->id;
                } else {
                    $stock_available->id_shop = (int) $id_shop;
                    $stock_available->id_shop_group = 0;
                }
                $stock_available->add();

                if (true === $add_movement && 0 != $quantity) {
                    $stockManager->saveMovement($id_product, $id_product_attribute, (int) $quantity);
                }
            }
                
            

            Hook::exec('actionUpdateQuantity',
                array(
                    'id_product' => $id_product,
                    'id_product_attribute' => $id_product_attribute,
                    'quantity' => $stock_available->quantity,
                )
            );

            
            
        }
        // $stockManager = ServiceLocator::get('\\PrestaShop\\PrestaShop\\Core\\Stock\\StockManager');
        // $stockManager->updateQuantity($product, $id_product_attribute, $delta_quantity, $id_shop, $add_movement, $params);

        return true;
    }
